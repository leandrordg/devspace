generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId  String  @unique
  name     String
  email    String  @unique
  username String  @unique
  image    String
  bio      String?
  private  Boolean @default(false)

  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follow[]        @relation("FollowingRelation")
  following              Follow[]        @relation("FollowersRelation")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  notificationsSent      Notification[]  @relation("NotificationsSent")
  notificationsReceived  Notification[]  @relation("NotificationsReceived")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content  String?
  image    String?
  authorId String
  private  Boolean @default(false)

  author   User      @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String?
  image     String?
  authorId  String
  postId    String
  published Boolean @default(false)

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  postId   String

  author User @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followerId  String
  followingId String

  follower  User @relation("FollowersRelation", fields: [followerId], references: [clerkId], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [clerkId], onDelete: Cascade)
}

model FollowRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requesterId String
  targetId    String

  requester User @relation("FollowRequestsSent", fields: [requesterId], references: [clerkId], onDelete: Cascade)
  target    User @relation("FollowRequestsReceived", fields: [targetId], references: [clerkId], onDelete: Cascade)

  @@unique([requesterId, targetId])
}

enum NotificationType {
  FOLLOW_REQUEST
  FOLLOW_REQUEST_ACCEPTED
  COMMENT
  LIKE
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        NotificationType
  message     String
  read        Boolean          @default(false)
  recipientId String
  senderId    String

  recipient User @relation("NotificationsReceived", fields: [recipientId], references: [clerkId], onDelete: Cascade)
  sender    User @relation("NotificationsSent", fields: [senderId], references: [clerkId], onDelete: Cascade)
}
